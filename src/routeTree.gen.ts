/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ChallengesIndexRouteImport } from './routes/challenges/index'
import { Route as ChallengesTypeTeamRouteImport } from './routes/challenges/type/team'
import { Route as ChallengesTypeIndividualRouteImport } from './routes/challenges/type/individual'
import { Route as ChallengesManagementVerifyStatusIndividualRouteImport } from './routes/challenges/management/verify-status/individual'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesIndexRoute = ChallengesIndexRouteImport.update({
  id: '/challenges/',
  path: '/challenges/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesTypeTeamRoute = ChallengesTypeTeamRouteImport.update({
  id: '/challenges/type/team',
  path: '/challenges/type/team',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesTypeIndividualRoute =
  ChallengesTypeIndividualRouteImport.update({
    id: '/challenges/type/individual',
    path: '/challenges/type/individual',
    getParentRoute: () => rootRouteImport,
  } as any)
const ChallengesManagementVerifyStatusIndividualRoute =
  ChallengesManagementVerifyStatusIndividualRouteImport.update({
    id: '/challenges/management/verify-status/individual',
    path: '/challenges/management/verify-status/individual',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/challenges': typeof ChallengesIndexRoute
  '/challenges/type/individual': typeof ChallengesTypeIndividualRoute
  '/challenges/type/team': typeof ChallengesTypeTeamRoute
  '/challenges/management/verify-status/individual': typeof ChallengesManagementVerifyStatusIndividualRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/challenges': typeof ChallengesIndexRoute
  '/challenges/type/individual': typeof ChallengesTypeIndividualRoute
  '/challenges/type/team': typeof ChallengesTypeTeamRoute
  '/challenges/management/verify-status/individual': typeof ChallengesManagementVerifyStatusIndividualRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/challenges/': typeof ChallengesIndexRoute
  '/challenges/type/individual': typeof ChallengesTypeIndividualRoute
  '/challenges/type/team': typeof ChallengesTypeTeamRoute
  '/challenges/management/verify-status/individual': typeof ChallengesManagementVerifyStatusIndividualRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/challenges'
    | '/challenges/type/individual'
    | '/challenges/type/team'
    | '/challenges/management/verify-status/individual'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/challenges'
    | '/challenges/type/individual'
    | '/challenges/type/team'
    | '/challenges/management/verify-status/individual'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/challenges/'
    | '/challenges/type/individual'
    | '/challenges/type/team'
    | '/challenges/management/verify-status/individual'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  ChallengesIndexRoute: typeof ChallengesIndexRoute
  ChallengesTypeIndividualRoute: typeof ChallengesTypeIndividualRoute
  ChallengesTypeTeamRoute: typeof ChallengesTypeTeamRoute
  ChallengesManagementVerifyStatusIndividualRoute: typeof ChallengesManagementVerifyStatusIndividualRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges/': {
      id: '/challenges/'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges/type/team': {
      id: '/challenges/type/team'
      path: '/challenges/type/team'
      fullPath: '/challenges/type/team'
      preLoaderRoute: typeof ChallengesTypeTeamRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges/type/individual': {
      id: '/challenges/type/individual'
      path: '/challenges/type/individual'
      fullPath: '/challenges/type/individual'
      preLoaderRoute: typeof ChallengesTypeIndividualRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges/management/verify-status/individual': {
      id: '/challenges/management/verify-status/individual'
      path: '/challenges/management/verify-status/individual'
      fullPath: '/challenges/management/verify-status/individual'
      preLoaderRoute: typeof ChallengesManagementVerifyStatusIndividualRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  ChallengesIndexRoute: ChallengesIndexRoute,
  ChallengesTypeIndividualRoute: ChallengesTypeIndividualRoute,
  ChallengesTypeTeamRoute: ChallengesTypeTeamRoute,
  ChallengesManagementVerifyStatusIndividualRoute:
    ChallengesManagementVerifyStatusIndividualRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
